{"version":3,"file":"bundles\\pages\\index.js","sources":["webpack:///webpack/bootstrap 5caed4d0a29e8c99ee12","webpack:///pages/index.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"html-react-parser\"","webpack:///external \"isomorphic-unfetch\"","webpack:///external \"react\"","webpack:///external \"styled-jsx/style\"","webpack:///external \"timers\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5caed4d0a29e8c99ee12","import React, { Component } from 'react'\nimport Parser from 'html-react-parser'\nimport fetch from 'isomorphic-unfetch'\nimport { clearInterval, setInterval } from 'timers';\n\nconst scoreboard = `|                                              |\n|                  SCORE: 0                    |\n|                                              |\n ---------------------------------------------- `\n\nexport default class extends Component {\n  constructor (props) {\n    super(props)\n    this.snake = []\n    this.direction = ''\n    this.scoreboard = scoreboard\n    this.score = 0\n    this.state = { board: undefined, start: false }\n    this.putOnTheBoard = this.putOnTheBoard.bind(this)\n    this.setupGame = this.setupGame.bind(this)\n  }\n\n  componentDidMount () {\n    this.setupGame().then(() => {\n      this.putOnTheBoard()\n      this.start()\n      this.setState({ start: true })\n    })\n  }\n\n  async setupGame () {\n    try {\n      const response = await fetch('/static/board.txt')\n      const board = await response.text()\n      this.setState({ board: board.toString().split('\\n').map(rb => rb.split('')) })\n      this.score = 0\n      this.scoreboard = scoreboard\n      this.snake = [[3, 12], [3, 11], [2, 11]]\n      return Promise.resolve(true)\n    } catch (err) {\n      return Promise.reject(new Error(err))\n    }\n  }\n\n  start () {\n    this.direction = ''\n    clearInterval(this.interval)\n    const cbStart = (event) => {\n      if (event && event.key === 'ArrowRight') {\n        if (this.direction !== 'ArrowLeft') {\n          clearInterval(this.interval)\n          this.interval = setInterval(() => {\n            this.moveRight()\n          }, 100)\n        }\n      }\n      if (event && event.key === 'ArrowLeft') {\n        if (this.direction !== 'ArrowRight') {\n          clearInterval(this.interval)\n          this.interval = setInterval(() => {\n            this.moveLeft()\n          }, 100)\n        }\n      }\n      if (event && event.key === 'ArrowUp') {\n        if (this.direction !== 'ArrowDown') {\n          clearInterval(this.interval)\n          this.interval = setInterval(() => {\n            this.moveUp()\n          }, 150)\n        }\n      }\n      if (event && event.key === 'ArrowDown') {\n        if (this.direction !== 'ArrowUp') {\n          clearInterval(this.interval)\n          this.interval = setInterval(() => {\n            this.moveDown()\n          }, 150)\n        }\n      }\n    }\n    document.removeEventListener('keydown', cbStart)\n    document.addEventListener('keydown', cbStart)\n  }\n\n  moveRight = () => {\n    if (this.direction !== 'left') {\n      this.direction = 'right'\n      let row, col\n      // remueve la cola\n      let lastPosition = this.snake[this.snake.length - 1]\n      const board = this.state.board.map((row) => {\n        return row.slice(0)\n      })\n      board[lastPosition[0]][lastPosition[1]] = ' '\n      this.setState({ board })\n      let currentPosition = this.snake[0]\n      // mueve la cabeza\n      row = currentPosition[0]\n      col = currentPosition[1]\n      this.snake[0] = [row, col + 1]\n      this.checkCollision()\n      // mueve el cuerpo\n      for (let i = 1; i < this.snake.length; i++) {\n        row = currentPosition[0]\n        col = currentPosition[1]\n        currentPosition = this.snake[i]\n        this.snake[i] = [row, col]\n      }\n      if (this.checkApple()) {\n        this.snake.push([lastPosition[0], lastPosition[1]])\n        ++this.score\n        this.putOnTheBoard()\n      }\n    } else {\n      this.moveLeft()\n    }\n  }\n\n  moveLeft = () => {\n    if (this.direction !== 'right') {\n      this.direction = 'left'\n      let row, col\n      // remueve la cola\n      let lastPosition = this.snake[this.snake.length - 1]\n      const board = this.state.board.map((row) => {\n        return row.slice(0)\n      })\n      board[lastPosition[0]][lastPosition[1]] = ' '\n      this.setState({ board })\n      let currentPosition = this.snake[0]\n      // mueve la cabeza\n      row = currentPosition[0]\n      col = currentPosition[1]\n      this.snake[0] = [row, col - 1]\n      this.checkCollision()\n      // mueve el cuerpo\n      for (let i = 1; i < this.snake.length; i++) {\n        row = currentPosition[0]\n        col = currentPosition[1]\n        currentPosition = this.snake[i]\n        this.snake[i] = [row, col]\n      }\n      if (this.checkApple()) {\n        this.snake.push([lastPosition[0], lastPosition[1]])\n        ++this.score\n        this.putOnTheBoard()\n      }\n    } else {\n      this.moveRight()\n    }\n  }\n\n  moveUp = () => {\n    if (this.direction !== 'down') {\n      this.direction = 'up'\n      let row, col\n      // remueve la cola\n      let lastPosition = this.snake[this.snake.length - 1]\n      const board = this.state.board.map((row) => {\n        return row.slice(0)\n      })\n      board[lastPosition[0]][lastPosition[1]] = ' '\n      this.setState({ board })\n      let currentPosition = this.snake[0]\n      // mueve la cabeza\n      row = currentPosition[0]\n      col = currentPosition[1]\n      this.snake[0] = [row - 1, col]\n      this.checkCollision()\n      // mueve el cuerpo\n      for (let i = 1; i < this.snake.length; i++) {\n        row = currentPosition[0]\n        col = currentPosition[1]\n        currentPosition = this.snake[i]\n        this.snake[i] = [row, col]\n      }\n      if (this.checkApple()) {\n        this.snake.push([lastPosition[0], lastPosition[1]])\n        ++this.score\n        this.putOnTheBoard()\n      }\n    } else {\n      this.moveDown()\n    }\n  }\n\n  moveDown = () => {\n    if (this.direction !== 'up') {\n      this.direction = 'down'\n      let row, col\n      // remueve la cola\n      let lastPosition = this.snake[this.snake.length - 1]\n      const board = this.state.board.map((row) => {\n        return row.slice(0)\n      })\n      board[lastPosition[0]][lastPosition[1]] = ' '\n      this.setState({ board })\n      let currentPosition = this.snake[0]\n      // mueve la cabeza\n      row = currentPosition[0]\n      col = currentPosition[1]\n      this.snake[0] = [row + 1, col]\n      this.checkCollision()\n      // mueve el cuerpo\n      for (let i = 1; i < this.snake.length; i++) {\n        row = currentPosition[0]\n        col = currentPosition[1]\n        currentPosition = this.snake[i]\n        this.snake[i] = [row, col]\n      }\n      if (this.checkApple()) {\n        this.snake.push([lastPosition[0], lastPosition[1]])\n        ++this.score\n        this.putOnTheBoard()\n      }\n    } else {\n      this.moveUp()\n    }\n  }\n\n  checkCollision = () => {\n    let row, col\n    let currentPosition = this.snake[0]\n    row = currentPosition[0]\n    col = currentPosition[1]\n    if (this.state.board[row][col] === '-' || this.state.board[row][col] === '|') {\n      this.setupGame().then(() => {\n        this.putOnTheBoard()\n        this.start()\n      })\n    }\n  }\n\n  checkApple () {\n    let row, col\n    let currentPosition = this.snake[0]\n    row = currentPosition[0]\n    col = currentPosition[1]\n    if (this.state.board[row][col] === '.') {\n      return true\n    }\n    return false\n  }\n\n  putOnTheBoard () {\n    const board = this.state.board.map((row) => {\n      return row.slice(0)\n    })\n    let rowRandom = Math.floor((Math.random() * (board.length - 2)) + 1)\n    let colRandom = Math.floor((Math.random() * (board[0].length - 2)) + 1)\n    while (board[rowRandom][colRandom] === '.') {\n      rowRandom = Math.floor((Math.random() * (board.length - 2)) + 1)\n      colRandom = Math.floor((Math.random() * (board[0].length - 2)) + 1)\n    }\n    board[rowRandom][colRandom] = '.'\n    this.setState({ board })\n  }\n\n  clearBoard () {\n    process.stdout.write('\\x1B[2J\\x1B[0f\\u001b[0;0H')\n  }\n\n  render () {\n    const Header = () => (\n      <div className=\"header\"> {'PRESS -> OR <- TO PLAY THE GAME'} </div>\n    )\n\n    const TerminalBar = () => (\n      <div className=\"bar\">\n        <div className=\"red\">\n        </div>\n        <div className=\"yellow\"></div>\n        <div className=\"green\"></div>\n        <style jsx global>{`\n          .header {\n            font-family: monospace;\n            color: #292A2A;\n            margin: auto;\n            padding: 15px;\n            font-size: 30px;\n            text-align: center;\n          }\n          .bar {\n            text-align: center;\n            width: 752px;\n            height: 25px;\n            background-color: #DAD9D9;\n            margin: 0 auto;\n            font-family: monospace;\n            padding: auto;\n            float: none;\n            border-radius: 5px 5px 0 0;\n          }\n          .red {\n            background-color: #E94B35;\n            border-radius: 100%;\n            width: 15px;\n            height: 15px;\n            margin: 0 auto;\n            left: -47%;\n            bottom: -20%;\n            position:relative;\n          }\n          .yellow {\n            background-color: #f0f000;\n            border-radius: 100%;\n            width: 15px;\n            height: 15px;\n            margin: 0 auto;\n            left: -44%;\n            bottom: 40%;\n            position:relative;\n            display: block;\n          }\n          .green {\n              background-color: #1AAF5C;\n              border-radius: 100%;\n              width: 15px;\n              height: 15px;\n              margin: 0 auto;\n              left: -41%;\n              bottom: 99%;\n              position:relative;\n              display: block;\n          }`}\n        </style>\n      </div>\n    )\n\n    if (this.state.board && this.state.start) {\n      this.scoreboard = this.scoreboard.replace(/([\\n])/g, '<br>')\n      this.scoreboard = this.scoreboard.replace(/([ ])/g, '&nbsp;')\n      // print the snake on the board for first time\n      let row, col\n      const board = this.state.board.map((row) => {\n        return row.slice(0)\n      })\n      for (let i = 0; i < this.snake.length; i++) {\n        let currentPosition = this.snake[i]\n        row = currentPosition[0]\n        col = currentPosition[1]\n        board[row][col] = '.'\n      }\n      let boardString = board.map(row => row.join('')).join('\\n')\n      // update score\n      this.scoreboard = this.scoreboard.replace(this.scoreboard.match(/([0-9])/g).join(''), `${this.score}`)\n      // print board\n      this.scoreboard = this.scoreboard.replace(/([\\n])/g, '<br>')\n      this.scoreboard = this.scoreboard.replace(/([ ])/g, '&nbsp;')\n      boardString = boardString.replace(/([\\n])/g, '<br>')\n      boardString = boardString.replace(/([ ])/g, '&nbsp;')\n      return (\n        <div>\n          <Header />\n          <TerminalBar />\n          <div className='terminal'>\n            {Parser(boardString)}\n            <br />\n            {Parser(this.scoreboard)}\n            <style jsx>{`\n              .terminal {\n                background-color: #33485E;\n                width: 750px;\n                height: 350px;\n                border-radius: 0 0 5px 5px;\n                margin: 0 auto;\n                padding: 1px;\n                color: #fff;\n                font-family: monospace;\n                text-align: center;\n              }\n            `}</style>\n          </div>\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// pages/index.js","module.exports = require(\"@babel/runtime/regenerator\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@babel/runtime/regenerator\"\n// module id = @babel/runtime/regenerator\n// module chunks = 3","module.exports = require(\"html-react-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"html-react-parser\"\n// module id = html-react-parser\n// module chunks = 3","module.exports = require(\"isomorphic-unfetch\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"isomorphic-unfetch\"\n// module id = isomorphic-unfetch\n// module chunks = 3","module.exports = require(\"react\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react\"\n// module id = react\n// module chunks = 3","module.exports = require(\"styled-jsx/style\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"styled-jsx/style\"\n// module id = styled-jsx/style\n// module chunks = 3","module.exports = require(\"timers\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"timers\"\n// module id = timers\n// module chunks = 3"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAKA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AA2EA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AA1GA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6GA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AA5IA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+IA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AA9KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiLA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAhNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmNA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA7NA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AARA;AASA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;AAIA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AACA;AACA;;;;;;;;;;;;;;;AAGA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAuJA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AADA;AACA;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAoBA;AACA;AACA;AACA;;;;AAjXA;AACA;;;;;;;;;;;;;;;;ACXA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;A","sourceRoot":""}